define(["require","exports","EventGroup"],function(t,e,n){var r="change",i="change",s=function(){function t(t){this.isList=!0,this.events=new n(this),this.array=t||[],this.events.declare([r,i])}return t.prototype.clear=function(){this.array=[],this.events.off()},t.prototype.getCount=function(){return this.array.length},t.prototype.setCount=function(t){this.array.length=t},t.prototype.indexOf=function(t){return this.array.indexOf(t)},t.prototype.getAt=function(t){return this.array[t]},t.prototype.setAt=function(t,e){this.array[t]&&this.events.off(this.array[t]),this.array[t]=e,e&&n.isDeclared(e,r)&&this.events.on(e,r,this.childChange),this.change({type:"update",index:t,item:e})},t.prototype.setRange=function(t,e){for(var n=0;n<e.length;n++)this.setAt(t++,e[n]);this.change({type:"insertRange",index:t,items:e})},t.prototype.insertAt=function(t,e){this.array.splice(t,0,e),e&&n.isDeclared(e,r)&&this.events.on(e,r,this.childChange),this.change({type:"insert",index:t,item:e})},t.prototype.push=function(t){return this.setAt(this.array.length,t),this.change({type:"insert",index:this.array.length-1,item:t}),t},t.prototype.pop=function(){var t=this.array.pop();return this.change({type:"remove",index:this.array.length}),t},t.prototype.remove=function(t){this.removeAt(this.array.indexOf(t))},t.prototype.removeAt=function(t){if(t>=0&&t<this.array.length){var e=this.array[t];e&&this.events.off(this.array[t]),this.array.splice(t,1),this.change({type:"remove",index:t})}},t.prototype.change=function(t){this.events.raise(r,t)},t.prototype.childChange=function(){this.events.raise(i)},t}();return s});